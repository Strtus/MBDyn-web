# MBDyn (C) is a multibody analysis code. 
# http://www.mbdyn.org
# 
# Copyright (C) 1996-2022
# 
# Pierangelo Masarati	<masarati@aero.polimi.it>
# Paolo Mantegazza	<mantegazza@aero.polimi.it>
# 
# Dipartimento di Scienze e Tecnologie Aerospaziali - Politecnico di Milano
# via La Masa, 34 - 20156 Milano, Italy
# http://www.aero.polimi.it
# 
# Changing this copyright notice is forbidden.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation (version 2 of the License).
# 
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


begin: data;
	problem: initial value; # the default
end: data;

begin: initial value;
	initial time: 0.;
	final time: 1.;
	time step: 1.e-3;

	max iterations: 10;
	tolerance: 1.e-6;
end: initial value;

begin: control data;
	structural nodes: 
		+1    # node in the constraint
		+1    # node in the mass
		+2    # distance: mass+ground
	;
	rigid bodies:
		+1    # node in the constraint
		+1    # node in the mass
		+1    # distance: mass
	;
	joints:
		+1    # node in the constraint: revolute
		+1    # node in the mass: revolute
		+2    # distance: distance+ground
	;
	gravity;
end: control data;

set: integer Pendulum = 1;
set: integer Mass = 2;
set: real M = 1.;
set: real L = .5;
set: real Omega0 = .2;

reference: Pendulum,
	reference, global, null,
	reference, global, eye,
	reference, global, null,
	reference, global, 0., Omega0, 0.;
reference: Mass,
	reference, Pendulum, 0., 0., -L,
	reference, Pendulum, eye,
	reference, Pendulum, null,
	reference, Pendulum, null;

begin: nodes;
	structural: 1000+Pendulum, dynamic, 
		reference, Pendulum, null, 
		reference, Pendulum, eye, 
		reference, Pendulum, null, 
		reference, Pendulum, null;

	structural: 2000+Mass, dynamic,
		reference, Mass, null,
		reference, Mass, eye,
		reference, Mass, null,
		reference, Mass, null;

	# no dynamic dofs (it will be fully grounded)
	structural: 3000+Pendulum, static, 
		reference, Pendulum, null,
		reference, Pendulum, eye,
		reference, Pendulum, null,
		reference, global, null;
	# "global" means no angular velocity!

	structural: 3000+Mass, dynamic,
		reference, Mass, null,
		reference, Mass, eye,
		reference, Mass, null,
		reference, global, null;
	# "global" means no angular velocity!
end: nodes;

begin: elements;
	body: 1000+Mass, 1000+Pendulum, 
		M,
		reference, Mass, null,
		# the problem is non-singular, despite the null inertia,
		# because of the constraint that does not allow rotation
		null;
	joint: 1000+Mass, revolute pin,
		1000+Pendulum, 
			reference, Pendulum, null,
			hinge, reference, Pendulum, 
				1, 1.,0.,0., 3, 0.,1.,0.,
		reference, Pendulum, null,
		hinge, reference, Pendulum, 
			1, 1.,0.,0., 3, 0.,1.,0.;

	body: 2000+Mass, 2000+Mass,
		M,
		reference, Mass, null,
		# the problem is non-singular, despite the null inertia,
		# because of the constraint that does not allow rotation
		null;
	joint: 2000+Mass, revolute pin,
		2000+Mass, 
			reference, Pendulum, null,
			hinge, reference, Pendulum, 
				1, 1.,0.,0., 3, 0.,1.,0.,
		reference, Pendulum, null,
		hinge, reference, Pendulum, 
			1, 1.,0.,0., 3, 0.,1.,0.;

	body: 3000+Mass, 3000+Mass,
		M,
		reference, Mass, null,
		# otherwise the problem would be singular ...
		eye;
	joint: 3000+Pendulum, clamp,
		3000+Pendulum, node, node;
	joint: 3000+Mass, distance,
		3000+Pendulum,
		3000+Mass,
		const, L;

	gravity: uniform, 0., 0., -1., const, 9.81;
end: elements;

# vim:ft=mbd
