# $Header: /var/cvs/mbdyn/mbdyn/mbdyn-web/documentation/examples/wire,v 1.3 2016/06/13 12:40:44 masarati Exp $
#
# MBDyn (C) is a multibody analysis code. 
# http://www.mbdyn.org
# 
# Copyright (C) 1996-2009
# 
# Pierangelo Masarati	<masarati@aero.polimi.it>
# Paolo Mantegazza	<mantegazza@aero.polimi.it>
# 
# Dipartimento di Scienze e Tecnologie Aerospaziali
# (formerly Dipartimento di Ingegneria Aerospaziale) - Politecnico di Milano
# via La Masa, 34 - 20156 Milano, Italy
# http://www.aero.polimi.it
# 
# Changing this copyright notice is forbidden.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation (version 2 of the License).
# 
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#
# Eigenanalysis of a pretensioned wire (e.g. a guitar string)
#
#      \                         /
#      -o-----o-----o-----o-----o-
#      /                         \
#
# change the value of TENSION to tune the frequency

#set: real TENSION = 0.e0;
#set: real TENSION = 1.e2;
set: real TENSION = 1.e4;

begin: data;
	problem: initial value;
end: data;

begin: initial value;
	initial time: 0.;
	final time: 1.;
	time step: 1e-3;

	tolerance: 1e-6;
	max iterations: 10;

	eigenanalysis: 1.,
		# use lapack, # the default; you need to build --with-lapack
		lower frequency limit, 0.,
		upper frequency limit, 100.,
		output eigenvectors;

	/*
	# the analysis is not performed; the matrices are output in a .m file
	# which can be loaded in matlab/octave and used to perform
	# the eigenanalysis as described in the user manual
	eigenanalysis: 1.,
		lower frequency limit, 0.,
		upper frequency limit, 100.,
		output sparse matrices;
	 */
end: initial value;

begin: control data;
	structural nodes: 5;
	joints: 2;
	rigid bodies: 3;
	beams: 2;
end: control data;

set: real L = 1.;
set: real M = 1.;
set: real JP = 1e-6;
set: real EA = (2*pi*100)^2;
set: real EJ = 1e-6;
set: real GJ = 1.;

begin: nodes;
	structural: 0, static,
		0./4.*L, 0., 0.,
		eye,
		null,
		null;
	structural: 1, dynamic,
		1./4.*L, 0., 0.,
		eye,
		null,
		null;
	structural: 2, dynamic,
		2./4.*L, 0., 0.,
		eye,
		null,
		null;
	structural: 3, dynamic,
		3./4.*L, 0., 0.,
		eye,
		null,
		null;
	structural: 4, static,
		4./4.*L, 0., 0.,
		eye,
		null,
		null;
end: nodes;

begin: elements;
	joint: 0, clamp, 0, node, node;
	joint: 4, clamp, 4, node, node;

	body: 1, 1,
		M/4,
		null,
		diag, JP/4, ((M/4)*(L/4)^2)/12, ((M/4)*(L/4)^2)/12;
	body: 2, 2,
		M/4,
		null,
		diag, JP/4, ((M/4)*(L/4)^2)/12, ((M/4)*(L/4)^2)/12;
	body: 3, 3,
		M/4,
		null,
		diag, JP/4, ((M/4)*(L/4)^2)/12, ((M/4)*(L/4)^2)/12;

	beam3: 1,
		0, null,
		1, null,
		2, null,
		eye,
		linear elastic generic,
			diag, EA, EA, EA, GJ, EJ, EJ,
		prestress, TENSION, 0., 0., 0., 0., 0.,
		same,
		same;
	beam3: 2,
		2, null,
		3, null,
		4, null,
		eye,
		linear elastic generic,
			diag, EA, EA, EA, GJ, EJ, EJ,
		prestress, TENSION, 0., 0., 0., 0., 0.,
		same,
		same;
end: elements;

# vim:ft=mbd

