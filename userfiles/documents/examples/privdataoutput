# MBDyn (C) is a multibody analysis code. 
# http://www.mbdyn.org
# 
# Copyright (C) 1996-2022
# 
# Pierangelo Masarati	<masarati@aero.polimi.it>
# Paolo Mantegazza	<mantegazza@aero.polimi.it>
# 
# Dipartimento di Scienze e Tecnologie Aerospaziali - Politecnico di Milano
# via La Masa, 34 - 20156 Milano, Italy
# http://www.aero.polimi.it
# 
# Changing this copyright notice is forbidden.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation (version 2 of the License).
# 
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

begin: data;
	problem: initial value;
end: data;

begin: initial value;
	initial time: 0.;
	final time: 1.;
	time step: 1.e-3;	

	tolerance: 1.e-6;
	max iterations: 10;

	method: ms, .6;

	derivatives coefficient: 1.e-9;
end: initial value;

begin: control data;
	structural nodes: 2;
	parameter nodes: 2;
	joints: 2;
	rigid bodies: 1;
	forces: 1;
end: control data;

begin: nodes;
	structural: 1, static,
		null,
		eye,
		null,
		null;
	structural: 2, dynamic,
		null,
		eye,
		null,
		null;
	parameter: 11, /* bound to */ element;
	parameter: 12, /* bound to */ element;
end: nodes;

begin: elements;
	# node 1 is clamped
	joint: 1, clamp, 1, node, node;
	# node 2 is connected to node 1 by a revolute
	joint: 2, revolute hinge,
		1, null,
		2, null;
	# the relative rotation (in rad) and the relativr velocity (in rad/s)
	# of the revolute are bound to parameters 11 and 12; their output
	# is available in file ".prm"
	bind: 2, joint, 11, name, "rz";
	bind: 2, joint, 12, name, "wz";
	# body 2 inertia
	body: 2, 2, 1., null, eye;
	# a constant couple uniformly accelerates body 2 about axis 3
	couple: 2, follower, 2, 0.,0.,1., const, 100.;
end: elements;

# vim:ft=mbd
