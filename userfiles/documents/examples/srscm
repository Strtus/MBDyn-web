# MBDyn (C) is a multibody analysis code. 
# http://www.mbdyn.org
# 
# Copyright (C) 1996-2022
# 
# Pierangelo Masarati	<masarati@aero.polimi.it>
# Paolo Mantegazza	<mantegazza@aero.polimi.it>
# 
# Dipartimento di Scienze e Tecnologie Aerospaziali - Politecnico di Milano
# via La Masa, 34 - 20156 Milano, Italy
# http://www.aero.polimi.it
# 
# Changing this copyright notice is forbidden.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation (version 2 of the License).
# 
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
# 
#
# Spatial Rigid Slider-crank Mechanism
# <http://193.147.37.183/src/scripts/gen_problem.py?problem_id=54>

begin: data;
	problem: initial value;
end: data;

set: const integer POINT_A = 10;
set: const integer POINT_B = 20;
set: const integer POINT_C = 30;

set: const integer GROUND = 0;
set: const integer CRANK = 100;
set: const integer ROD = 200;
set: const integer BLOCK = 300;

set: const real L_CRANK = 0.08; # m
set: const real L_ROD = 0.3; # m

set: const real X_POINT_A = 0.; # m
set: const real Y_POINT_A = 0.1; # m
set: const real Z_POINT_A = 0.12; # m

set: const real X_POINT_B = X_POINT_A; # m
set: const real Y_POINT_B = Y_POINT_A; # m
set: const real Z_POINT_B = Z_POINT_A + L_CRANK;

set: const real X_POINT_C = sqrt(L_ROD^2 - 0.1^2 - (0.12 + L_CRANK)^2);
set: const real Y_POINT_C = 0.; # m
set: const real Z_POINT_C = 0.; # m

set: real OMEGA = 6.; # rad/s

begin: initial value;
	initial time: 0.;
	final time: 5; # s
	# time step: 2e-3; # s
	time step: 4e-3; # s
	# time step: 1.05e-2; # s
	# time step: 0.016722408; # s; same as reference

	method: ms, .6;

	tolerance: 1e-9;
	max iterations: 20;

	linear solver: naive, colamd;
	nonlinear solver: newton raphson, modified, 10;

	# output: none;
	# output: iterations;
	# output: residual;
end: initial value;

begin: control data;
	structural nodes:
		+1		# crank
		+1		# rod
		+1		# sliding block
	;

	rigid bodies:
		+1		# crank
		+1		# rod
		+1		# sliding block
	;

	joints: 
		+1		# crank hinge
		+1		# crank-rod pin
		+1		# rod-block Cardano
		+1		# block slider
	;

	gravity;

	# default output: none;
	tolerance: 1e-9;
	max iterations: 20;
end: control data;

reference: GROUND,
	reference, global, null,
	reference, global, eye,
	reference, global, null,
	reference, global, null;

reference: POINT_A,
	reference, GROUND, X_POINT_A, Y_POINT_A, Z_POINT_A,
	reference, GROUND, eye,
	reference, GROUND, null,
	reference, GROUND, null;

reference: POINT_B,
	reference, POINT_A, 0., 0., L_CRANK,
	reference, POINT_A, eye,
	reference, POINT_A, null,
	reference, POINT_A, null;

reference: POINT_C,
	reference, GROUND, X_POINT_C, Y_POINT_C, Z_POINT_C,
	reference, GROUND, eye,
	reference, GROUND, null,
	reference, GROUND, null;

reference: CRANK + 1,
	reference, POINT_A, null,
	reference, POINT_A, 1, 1., 0., 0., 2, 0., 0., 1.,
	reference, POINT_A, null,
	reference, POINT_A, OMEGA, 0., 0.;

reference: CRANK,
	reference, CRANK + 1, 0., L_CRANK/2, 0.,
	reference, CRANK + 1, eye,
	reference, CRANK + 1, null,
	reference, CRANK + 1, null;

reference: ROD + 1,
	reference, POINT_C, null,
	reference, POINT_C,
		2, -X_POINT_C, Y_POINT_B, Z_POINT_B,
		3, 1., 0., 0., # note: not orthogonal to 2; 
	reference, POINT_C, null,
	reference, POINT_C, null;

reference: ROD,
	reference, ROD + 1, 0., L_ROD/2, 0.,
	reference, ROD + 1, eye,
	reference, ROD + 1, null,
	reference, ROD + 1, null;

reference: BLOCK,
	reference, POINT_C, null,
	reference, POINT_C, eye,
	reference, POINT_C, null,
	reference, POINT_C, null;

begin: nodes;
	structural: CRANK, dynamic,
		reference, CRANK, null,
		reference, CRANK, eye,
		reference, CRANK, null,
		reference, CRANK, null;

	structural: ROD, dynamic,
		reference, ROD, null,
		reference, ROD, eye,
		reference, ROD, null,
		reference, ROD, null,
			assembly, 1., 0., no;

	structural: BLOCK, dynamic,
		reference, BLOCK, null,
		reference, BLOCK, eye,
		reference, BLOCK, null,
		reference, BLOCK, null,
			assembly, 1., 0., no;
end: nodes;

begin: elements;
	body: CRANK, CRANK,
		0.12,
		null,
		diag, 0.0001, 0.00001, 0.0001;

	body: ROD, ROD,
		0.5,
		null,
		diag, 0.004, 0.0004, 0.004;

	body: BLOCK, BLOCK,
		2.,
		null,
		diag, 0.0001, 0.0001, 0.0001;

	joint: POINT_A, revolute pin,
		CRANK,
			position, reference, POINT_A, null,
			orientation, reference, POINT_A, 3, 1., 0., 0., 2, 0., 1., 0.,
		position, reference, POINT_A, null,
		orientation, reference, POINT_A, 3, 1., 0., 0., 2, 0., 1., 0.;

	joint: POINT_B, spherical hinge,
		CRANK,
			position, reference, POINT_B, null,
			orientation, reference, POINT_B, eye,
		ROD,
			position, reference, POINT_B, null,
			orientation, reference, POINT_B, eye;

	joint: POINT_C, cardano hinge,
		BLOCK,
			position, reference, POINT_C, null,
			orientation, reference, node, 3, 1., 0., 0., 2, guess,
		ROD,
			position, reference, POINT_C, null,
			orientation, reference, node, 2, 1., 0., 0., 3, guess;

	joint: POINT_C + 1, total pin joint,
		BLOCK,
			position, reference, POINT_C, null,
			position orientation, reference, POINT_C, eye,
			rotation orientation, reference, POINT_C, eye,
		position, reference, POINT_C, null,
		position orientation, reference, POINT_C, eye,
		rotation orientation, reference, POINT_C, eye,
		position constraint, 0, 1, 1, null,
		orientation constraint, 1, 1, 1, null;

	gravity: 0., 0., -1., const, 9.81;
end: elements;

# vim:ft=mbd
